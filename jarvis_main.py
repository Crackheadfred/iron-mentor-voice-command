#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
J.A.R.V.I.S. - Assistant Vocal Intelligent Local
Module principal de gestion
"""

import os
import sys
import json
import threading
import time
import logging
import select
from datetime import datetime
from pathlib import Path

# Pour Windows
try:
    import msvcrt
except ImportError:
    msvcrt = None

# Modules internes
from modules.voice_manager import VoiceManager
from modules.speech_recognition_module import SpeechRecognitionModule
from modules.ollama_client import OllamaClient
from modules.openai_client import OpenAIClient
from modules.screen_monitor import ScreenMonitor
from modules.simhub_mechanic import SimHubMechanic
from modules.dcs_cockpit import DCSCockpit
from modules.memory_manager import MemoryManager

class JARVIS:
    def __init__(self):
        """Initialisation de J.A.R.V.I.S."""
        self.setup_logging()
        self.logger = logging.getLogger(__name__)
        
        # Configuration
        self.config = self.load_config()
        self.is_active = True
        self.is_silent = False
        self.current_voice = "William"  # William ou Windows
        
        # Initialisation des modules
        self.memory_manager = MemoryManager()
        self.voice_manager = VoiceManager(self.config)
        self.speech_recognition = SpeechRecognitionModule(self.config)
        self.ollama_client = OllamaClient(self.config)
        self.openai_client = OpenAIClient(self.config)
        self.screen_monitor = ScreenMonitor(self.config)
        self.simhub_mechanic = SimHubMechanic(self.config)
        self.dcs_cockpit = DCSCockpit(self.config)
        
        # Commandes d'activation/d√©sactivation
        self.activation_phrases = [
            "jarvis", "j.a.r.v.i.s", "t'es l√†", "pr√™t pour mes commandes",
            "jarvis t'es l√†", "j.a.r.v.i.s. t'es l√†", "pr√™t pour mes commandes jarvis"
        ]
        
        self.silence_phrases = [
            "silence", "c'est beau", "tais-toi", "stop"
        ]
        
        self.logger.info("J.A.R.V.I.S. initialis√© avec succ√®s")
        
    def setup_logging(self):
        """Configuration du syst√®me de logs"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(f"logs/jarvis_{datetime.now().strftime('%Y%m%d')}.log"),
                logging.StreamHandler()
            ]
        )
    
    def load_config(self):
        """Chargement de la configuration"""
        config_path = Path("config/config.json")
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            # Configuration par d√©faut
            default_config = {
                "ollama": {
                    "model": "mistral-small3.2:24b",
                    "url": "http://localhost:11434"
                },
                "openai": {
                    "api_key": "",
                    "model": "gpt-4"
                },
                "voice": {
                    "william_voice_path": "voices/william/",
                    "tts_engine": "tortoise"
                },
                "screen": {
                    "ocr_enabled": True,
                    "monitoring_interval": 2
                },
                "simhub": {
                    "enabled": True,
                    "port": 8888
                },
                "dcs": {
                    "enabled": True,
                    "aircraft": "F/A-18C"
                }
            }
            
            # Cr√©er le r√©pertoire de config et sauvegarder
            config_path.parent.mkdir(exist_ok=True)
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2, ensure_ascii=False)
            
            return default_config
    
    def speak(self, text):
        """Faire parler J.A.R.V.I.S."""
        if not self.is_silent:
            self.voice_manager.speak(text, voice=self.current_voice)
            self.logger.info(f"J.A.R.V.I.S. dit: {text}")
    
    def listen(self):
        """√âcouter les commandes vocales"""
        try:
            return self.speech_recognition.listen()
        except Exception as e:
            self.logger.error(f"Erreur lors de l'√©coute: {e}")
            return None
    
    def process_command(self, command):
        """Traiter une commande vocale ou textuelle"""
        if not command:
            return
            
        command_lower = command.lower()
        self.logger.info(f"Commande re√ßue: {command}")
        
        # Sauvegarde en m√©moire
        self.memory_manager.add_interaction("user", command)
        
        # Commandes de contr√¥le syst√®me
        if any(phrase in command_lower for phrase in self.silence_phrases):
            self.is_silent = True
            self.speak("Mode silencieux activ√©.")
            return
            
        if any(phrase in command_lower for phrase in self.activation_phrases) and self.is_silent:
            self.is_silent = False
            self.speak("Je suis l√†, monsieur. Pr√™t pour vos commandes.")
            return
            
        # Commandes de changement de voix
        if "change de voix" in command_lower or "voix windows" in command_lower:
            self.current_voice = "Windows" if self.current_voice == "William" else "William"
            self.speak(f"Voix chang√©e vers {self.current_voice}")
            return
            
        # Commandes sp√©cifiques aux modules
        if "utilise chatgpt" in command_lower:
            response = self.openai_client.get_response(command)
            self.speak(response)
            self.memory_manager.add_interaction("jarvis", response)
            return
            
        if "analyse l'√©cran" in command_lower:
            screen_data = self.screen_monitor.analyze_screen()
            response = f"Je vois: {screen_data}"
            self.speak(response)
            return
            
        if "analyse mon tour" in command_lower:
            telemetry = self.simhub_mechanic.get_telemetry_advice()
            self.speak(telemetry)
            return
            
        if "active le module f-18" in command_lower or "module dcs" in command_lower:
            self.dcs_cockpit.activate()
            self.speak("Module F/A-18 activ√©. Je suis pr√™t √† vous assister.")
            return
            
        if self.dcs_cockpit.is_active and ("comment" in command_lower or "pr√©pare" in command_lower):
            response = self.dcs_cockpit.handle_command(command)
            self.speak(response)
            return
        
        # Commande g√©n√©rale - utiliser Ollama
        try:
            print(f"ü§ñ Traitement avec Ollama: {command}")
            context = self.get_context()
            
            # V√©rifier si Ollama est disponible avant d'essayer
            if not self.ollama_client.test_connection():
                print("‚ùå Ollama non connect√©")
                self.speak("Je ne parviens pas √† acc√©der √† mon processeur principal. V√©rifiez qu'Ollama est d√©marr√©.")
                return
            
            response = self.ollama_client.get_response(command, context)
            print(f"ü§ñ R√©ponse Ollama: {response}")
            
            if response and response.strip():
                self.speak(response)
                self.memory_manager.add_interaction("jarvis", response)
            else:
                print("‚ùå R√©ponse vide d'Ollama")
                self.speak("Je n'ai pas pu g√©n√©rer de r√©ponse. Veuillez r√©essayer.")
                
        except Exception as e:
            error_msg = f"Erreur lors du traitement: {e}"
            self.logger.error(error_msg)
            print(f"‚ùå Erreur Ollama: {e}")
            self.speak("D√©sol√©, j'ai rencontr√© une erreur lors du traitement de votre demande.")
    
    def get_context(self):
        """Obtenir le contexte actuel (√©cran, t√©l√©m√©trie, etc.)"""
        context = {
            "timestamp": datetime.now().isoformat(),
            "screen_active": self.screen_monitor.is_monitoring,
            "dcs_active": self.dcs_cockpit.is_active,
            "recent_interactions": self.memory_manager.get_recent_interactions(5)
        }
        
        # Ajouter donn√©es d'√©cran si disponibles
        if self.screen_monitor.is_monitoring:
            context["screen_data"] = self.screen_monitor.get_current_screen_text()
        
        # Ajouter donn√©es de t√©l√©m√©trie si disponibles
        if self.simhub_mechanic.is_connected():
            context["telemetry"] = self.simhub_mechanic.get_current_telemetry()
            
        return context
    
    def start_background_monitoring(self):
        """D√©marrer la surveillance en arri√®re-plan"""
        def monitor_screen():
            while self.is_active:
                if self.screen_monitor.is_monitoring:
                    self.screen_monitor.update_screen_data()
                time.sleep(2)
        
        def monitor_simhub():
            while self.is_active:
                if self.simhub_mechanic.is_connected():
                    self.simhub_mechanic.update_telemetry()
                time.sleep(0.5)
        
        # D√©marrer les threads de surveillance
        threading.Thread(target=monitor_screen, daemon=True).start()
        threading.Thread(target=monitor_simhub, daemon=True).start()
        
        self.logger.info("Surveillance en arri√®re-plan d√©marr√©e")
    
    def run(self):
        """Boucle principale de J.A.R.V.I.S."""
        print("üé§ Initialisation de J.A.R.V.I.S...")
        self.speak("J.A.R.V.I.S. en ligne. Tous les syst√®mes op√©rationnels.")
        
        # Test du microphone
        print("üé§ Test du microphone...")
        mic_test = self.speech_recognition.test_microphone()
        if not mic_test[0]:
            print(f"‚ùå Probl√®me microphone: {mic_test[1]}")
            self.speak("Attention: probl√®me avec le microphone d√©tect√©.")
        else:
            print("‚úÖ Microphone op√©rationnel")
        
        # D√©marrer la surveillance en arri√®re-plan
        self.start_background_monitoring()
        
        # Activer l'analyse d'√©cran par d√©faut
        self.screen_monitor.start_monitoring()
        
        print("üé§ J.A.R.V.I.S. vous √©coute... Parlez maintenant !")
        print("üí¨ Vous pouvez aussi taper des commandes et appuyer sur Entr√©e")
        
        try:
            while self.is_active:
                # √âcoute vocale
                command = self.listen()
                if command:
                    print(f"üé§ Vous avez dit: {command}")
                    self.process_command(command)
                
                # √âcoute clavier (compatible Windows/Linux)
                try:
                    if msvcrt and msvcrt.kbhit():  # Windows
                        print("üí¨ Tapez votre commande: ", end="", flush=True)
                        keyboard_input = input().strip()
                        if keyboard_input.lower() == "exit":
                            break
                        if keyboard_input:
                            print(f"‚å®Ô∏è Commande tap√©e: {keyboard_input}")
                            self.process_command(keyboard_input)
                except KeyboardInterrupt:
                    break
                except:
                    pass  # Ignorer les erreurs de clavier
                
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            self.logger.info("Arr√™t de J.A.R.V.I.S. demand√©")
            self.speak("Au revoir, monsieur.")
            self.is_active = False
        except Exception as e:
            self.logger.error(f"Erreur critique: {e}")
            self.speak("Erreur syst√®me critique. Arr√™t d'urgence.")
            self.is_active = False

if __name__ == "__main__":
    jarvis = JARVIS()
    jarvis.run()